//  Copyright (c) 2017-2019 Emily McDonough.  All rights reserved.
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at http://mozilla.org/MPL/2.0/.

#ifndef LIBCPP216_ALLOCATOR
#define LIBCPP216_ALLOCATOR
#pragma once

#include <stddef.h> // For size_t and ptrdiff_t
#include <stdlib.h> // For malloc/free

// Defines the interface for an allocator, and a default implementation.

// CPP216 only defines and only requires the C++20 interface. An allocator
// which satisfies older interfaces will still function, but are not required.

// Some members are still defined for compatibility with C++ before C++20, but
// are stubbed will not be used elsewhere.

namespace std {

template<class T>
struct allocator {
    typedef T value_type;
    typedef T* pointer; // Not C++20
    typedef const T* const_pointer; // Not C++20
    typedef T& reference; // Not C++20
    typedef const T& const_reference; // Not C++20
    typedef size_type size_t; 
    typedef difference_type ptrdiff_t; 
    
    struct rebind{}; // This was the worst idea ever. And it's not in C++20.
    
    allocator(){}
    allocator(const allocator &o){ (void)o; }
    ~allocator(){}
    
    T *allocate(size_t n) const {
        return malloc(sizeof(T)*n);
    }

    // Not in C++20
    inline T *allocate(size_t n, void *x) const {
        (void)x;
        return allocate(n);
    }
    
    void deallocate(T *that){
        free(that);
    }
    
    // Not in C++20
    size_type max_size() const {
        return ~((size_type)0);
    }
};

} // namespace std

#endif // LIBCPP216_ALLOCATOR
